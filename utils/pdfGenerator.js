const PDFDocument = require("pdfkit");

const generateTranscriptionPDF = ({
  title,
  transcription,
  summary,
  createdAt,
}) => {
  return new Promise((resolve, reject) => {
    const doc = new PDFDocument({
      margins: { top: 50, bottom: 70, left: 50, right: 50 },
      bufferPages: true,
    });

    const buffers = [];
    doc.on("data", buffers.push.bind(buffers));
    doc.on("end", () => resolve(Buffer.concat(buffers)));
    doc.on("error", reject);

    // Main content
    doc.font("Times-Roman");

    doc.fontSize(20).text(`Meeting Title: ${title}`, { underline: true });
    doc.moveDown(0.5);

    const timestamp = Date.now();

    doc
      .fontSize(12)
      .fillColor("gray")
      .text(
        `Created at: ${new Date(
          createdAt
        ).toLocaleString()} - Generated by MasihMeeting at: ${new Date(
          timestamp
        ).toLocaleString()}`
      );
    doc.moveDown(1);

    doc.fontSize(14).fillColor("black").text("Summary", { underline: true });
    doc.moveDown(0.5);
    doc.fontSize(12).text(summary || "No summary provided.");
    doc.moveDown(1.5);

    doc.fontSize(14).text("Full Transcription", { underline: true });
    doc.moveDown(0.5);
    doc.fontSize(11).text(transcription || "No transcription available.", {
      lineGap: 4,
    });

    doc.flushPages();

    const pageRange = doc.bufferedPageRange();

    for (let i = pageRange.start; i < pageRange.start + pageRange.count; i++) {
      doc.switchToPage(i);
      doc
        .font("Times-Roman")
        .fontSize(8)
        .fillColor("gray")
        .text("Generated by MasihMeeting", 50, doc.page.height - 50, {
          align: "center",
          width: doc.page.width - 100,
        });
    }

    doc.end();
  });
};

module.exports = { generateTranscriptionPDF };
